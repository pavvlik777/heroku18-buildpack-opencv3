#!/bin/bash

title() {
  echo "-----> $*"
}

subtitle() {
  echo "       $*"
}

shopt -s extglob

if [ $(uname) == Darwin ]; then
    sed() { command sed -l "$@"; }
else
    sed() { command sed -u "$@"; }
fi

# Does some serious copying.
deep-cp() {
  declare source="$1" target="$2"

  mkdir -p "$target"

  # cp doesn't like being called without source params,
  # so make sure they expand to something first.
  # subshell to avoid surprising caller with shopts.
  (
    shopt -s nullglob dotglob
    set -- "$source"/!(tmp|.|..)
    [[ $# == 0 ]] || cp -a "$@" "$target"
  )
}

# Does some serious moving.
deep-mv() {
  deep-cp "$1" "$2"
  deep-rm "$1"
}

# Does some serious deleting.
deep-rm() {
  # subshell to avoid surprising caller with shopts.
  (
    shopt -s dotglob
    rm -rf "$1"/!(tmp|.|..)
  )
}
###################################

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

APP_DIR="/app"
ORIG_BUILD_DIR=$BUILD_DIR
BUILD_DIR=$APP_DIR
cd $BUILD_DIR


DOWNLOAD_URL="https://www.dropbox.com/s/9r5khcph5sdehys/heroku18-buildpack-opencv4.5.0.tar.gz?dl=0"

# Setup environment
mkdir -p $CACHE_DIR
title "Generating environment"
#if [ ! -f $CACHE_DIR/vendor.tar.xz ]; then
subtitle "Fetching..."
curl -s -L $DOWNLOAD_URL > $CACHE_DIR/vendor.tar.xz
#fi
subtitle "Unpacking..."
tar -xvf $CACHE_DIR/vendor.tar.xz -C $BUILD_DIR
rm -rf $CACHE_DIR/vendor.tar.xz

# creating env variables
title "Creating environment variables."
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/opencv.sh
export LD_LIBRARY_PATH="\$HOME/.heroku/vendor/lib:\$LD_LIBRARY_PATH"
export PATH="\$HOME/.heroku/vendor/bin:\$PATH"
EOF

deep-mv $BUILD_DIR/.heroku $ORIG_BUILD_DIR/.heroku
deep-mv $BUILD_DIR/.profile.d $ORIG_BUILD_DIR/.profile.d


